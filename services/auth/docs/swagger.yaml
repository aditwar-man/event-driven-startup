basePath: /api/v1
definitions:
  auth.TokenPair:
    properties:
      access_token:
        type: string
      expires_in:
        type: integer
      refresh_token:
        type: string
      token_type:
        type: string
    type: object
  domain.User:
    properties:
      ai_description_quota_limit:
        type: integer
      ai_description_quota_used:
        type: integer
      ai_video_quota_limit:
        type: integer
      ai_video_quota_used:
        type: integer
      auto_posting_quota_limit:
        type: integer
      auto_posting_quota_used:
        type: integer
      created_at:
        type: string
      email:
        type: string
      full_name:
        type: string
      id:
        type: string
      tier:
        $ref: '#/definitions/domain.UserTier'
      updated_at:
        type: string
    type: object
  domain.UserTier:
    enum:
    - free
    - pro
    type: string
    x-enum-varnames:
    - UserTierFree
    - UserTierPro
  dto.ChangePasswordRequest:
    properties:
      current_password:
        type: string
      new_password:
        minLength: 8
        type: string
    required:
    - current_password
    - new_password
    type: object
  dto.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  dto.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  dto.LoginResponse:
    properties:
      data:
        $ref: '#/definitions/dto.LoginResponseData'
      message:
        type: string
      session:
        $ref: '#/definitions/dto.SessionInfo'
    type: object
  dto.LoginResponseData:
    properties:
      tokens:
        $ref: '#/definitions/auth.TokenPair'
      user:
        $ref: '#/definitions/domain.User'
    type: object
  dto.LogoutRequest:
    properties:
      session_id:
        type: string
    type: object
  dto.ProfileResponse:
    properties:
      created_at:
        type: string
      email:
        type: string
      full_name:
        type: string
      tier:
        type: string
      user_id:
        type: string
    type: object
  dto.RefreshTokenRequest:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  dto.RefreshTokenResponse:
    properties:
      data:
        $ref: '#/definitions/auth.TokenPair'
      message:
        type: string
    type: object
  dto.RegisterRequest:
    properties:
      email:
        type: string
      full_name:
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email
    - full_name
    - password
    type: object
  dto.RegisterResponse:
    properties:
      data:
        $ref: '#/definitions/dto.RegisterResponseData'
      message:
        type: string
    type: object
  dto.RegisterResponseData:
    properties:
      tokens:
        $ref: '#/definitions/auth.TokenPair'
      user:
        $ref: '#/definitions/domain.User'
    type: object
  dto.RevokeSessionRequest:
    properties:
      session_id:
        type: string
    required:
    - session_id
    type: object
  dto.SessionInfo:
    properties:
      created_at:
        type: string
      expires_at:
        type: string
      id:
        type: string
      ip_address:
        type: string
      user_agent:
        type: string
    type: object
  dto.SessionResponse:
    properties:
      created_at:
        type: string
      expires_at:
        type: string
      id:
        type: string
      ip_address:
        type: string
      user_agent:
        type: string
    type: object
  dto.SessionsListResponse:
    properties:
      sessions:
        items:
          $ref: '#/definitions/dto.SessionResponse'
        type: array
    type: object
  dto.SuccessResponse:
    properties:
      message:
        type: string
    type: object
host: localhost:8081
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: Authentication and Authorization microservice for SMM Platform
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: SMM Platform - Auth Service
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return tokens
      parameters:
      - description: Login request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: User login
      tags:
      - auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Invalidate user session
      parameters:
      - description: Logout request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.LogoutRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: User logout
      tags:
      - auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Get new access token using refresh token
      parameters:
      - description: Refresh token request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.RefreshTokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Refresh access token
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Create a new user account
      parameters:
      - description: Register request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.RegisterResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Register a new user
      tags:
      - auth
  /change-password:
    post:
      consumes:
      - application/json
      description: Change current user's password
      parameters:
      - description: Change password request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.ChangePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Change user password
      tags:
      - user
  /profile:
    get:
      consumes:
      - application/json
      description: Get current user profile information
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ProfileResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user profile
      tags:
      - user
  /sessions:
    get:
      consumes:
      - application/json
      description: Get all active sessions for current user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SessionsListResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user sessions
      tags:
      - user
  /sessions/revoke:
    post:
      consumes:
      - application/json
      description: Revoke a specific user session
      parameters:
      - description: Revoke session request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.RevokeSessionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Revoke a session
      tags:
      - user
  /sessions/revoke-all:
    post:
      consumes:
      - application/json
      description: Revoke all active sessions for current user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SuccessResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Revoke all sessions
      tags:
      - user
  /upgrade-tier:
    post:
      consumes:
      - application/json
      description: Upgrade user account to PRO tier
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SuccessResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Upgrade to PRO tier
      tags:
      - user
schemes:
- http
securityDefinitions:
  BearerAuth:
    description: 'JWT Authorization header using the Bearer scheme. Example: "Bearer
      {token}"'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
